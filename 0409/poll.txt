struct pollfd fds[4096];
// 감시하고자 하는 디스크립터를 하고 싶은 것만 감시하는 것이다.
// select 는 set 되어있는 것을 감시하는 것이다. 
// poll : System V에서 처음 제공된 시스템 콜입니다.
// => select의 사용상의 단점을 보완한다. 
// 1. nfds(최대값)을 관리할 필요가 없다.
// 2. 1024개의 한계가 없다.
// 3. select에 비해서 효율적으로 동작한다.

// epoll을 지원하지 않을 때 이것을 써야 한다. 
/ /epoll을 쓰면된다. 

// 단점
// 1. 디스크립터 배열을 직접관리 해야한다. 
// 2. 성능은 비효율적인 부분이 생긴다.
// 	: 하나의 디스크립터에서 이벤트가 발생하였다고 하더라도 해당 디스크립터를 검색해야한다. 
디스크립터 배열 안에서 검색을 해야한다. select 는 1024를 순회 해야한다. 내가 가지고 있는 것만 순회 해야한다. 내가 가지고 있는 배열 전체를 순회를 해야한다. 

완벽하게 해결 하고 있다. df 배열을 만들었고 빵구내서 했지만 descripter 관리는 커널이 한다. 
디스크립터를 등록하고 해지하는 api는 epoll 이 해결한다. 
// 이벤트가 발생한 디스크립터 배열을 반환한다. 2개만 순회하면 끝이다. 
// 커널에서 알아서 잘 처리해준다. 고도화 되면 될 수록 더 좋아진다. 추상화 되면 될 수록 고도화 되면 될 수록 좋아진다. 
// 







fds[0].fd = ssock;
fds[0].events = POLLIN;
int nfds = 1;

int i;
int ret;
char buf[512];
while (1) {
	poll(fds, nfds, -1);
	for (i = 0; i < nfds; ++i) {
		if (fds[i].revents &POLLIN) {
			if (fds[i].fd == ssock) {
				if (csock == -1) {
					perror("accept");
					return 1;
				}
				//감시하고자 하는 디스크립터를 등록한다.
				fds[nfds].fd = csock;
				fds[nfds].events = POLLIN; //read의 이벤트를 감시를 하고 싶다.
				nfds++;
			} else {
				int fd = fds[i].fd;
				ret = read(fd, buf, sizeof buf);
				if (ret <= 0) {
					printf("연결이 종료되었습니다 \n");
					FD_CLR(fd, &fds);

				}
				write(fd, buf, ret);
			}
		}
		// poll의 핵심 : 감시하고자하는 디스크립터 배열을 직접 관리 해야한다.
		// 새로운 디스크립터를 추가하고 삭제하는 로직을 작성해야한다. 
		// 로직을 작성하면된다. 
		// -1이 아닌것만 복사해서 해당 값을 작성한다. 
		if (compress) {
			int n = 0;
			struct pollfd temp[4096];
			for (i = 0; i < nfds; ++i) {
				if (fds[i].fd != -1) {
					temp[n++] = fds[i];
				}
			}
			memcpy(fds, temp, n * sizeof(pollfd));
			nfds = n;
			compress = 0;
		}
	}
}

동작 중간에 배열의 값이 변경되는 것은 좋지 않다. 
로직에 flag를 만들어서 처리를 해준다. 

